var plugins = require('gulp-load-plugins')({lazy: true});
var args = require('yargs').argv;
var glob = require('glob');
var gulp = require('gulp');
var config = require('./gulp.config')();
var del = require('del');

var port = process.env.PORT || config.defaultPort;

var environment;
var error;
var reloadPath;


////////// TASKS ////////////

/**
 * Prints out the list  of available tasks.
 */
gulp.task('default', plugins.shell.task(['gulp --tasks']));

////// igonzalez tasks /////////////

////////// CODE ANALYSIS TASKS ////////////




////////// ANGULAR TASKS ////////////


///////// SERVE TASKS ///////////////

/**
 * Starts a server serving from distribution environment.
 */
gulp.task('serve-dist', [/* TODO add copy dependencies */], function () {
  environment = 'dist';
  log('*** Starting dist server ***');
  if (args.analyze) {
    plugins.sequence('analyze', 'serve', done);
  } else {
    plugins.sequence('serve', done);
  }
});





/**
 * Reloads the distribution server with the new files.
 */
gulp.task('reload-dist-html', [/* TODO add copy dependencies */], function() {
  return gulp
    .src([config.paths.dist + '**/*.html', config.paths.dist + '**/*.js'])
    .pipe(plugins.connect.reload());
});

/**
 * Reloads the dist server with the new files.
 */
gulp.task('reload-dist-styles', function() {
  // TODO add copy dependencies
  reloadPath = config.paths.dist + '**/*.css';
  if (args.analyze) {
    plugins.sequence('analyze', config.style.framework, 'reload-server', done);
  } else {
    plugins.sequence(config.style.framework, 'reload-server', done);
  }
});

/**
 * Reloads the dist server with the new files.
 */
gulp.task('reload-dist-js', ['template-cache'/* TODO add copy dependencies */], function() {
  // TODO add copy dependencies
  reloadPath = config.paths.dist + '**/*.js';
  if (args.analyze) {
    plugins.sequence('analyze', 'template-cache', 'reload-server', done);
  } else {
    plugins.sequence('template-cache', 'reload-server', done);
  }
});


//////// TESTING TASKS //////////////


////// fjfernandez tasks /////////////

/**
 * This task copies the app into DIST folder
 * Dependency: clean-dist, minify-html, minify-js
 * @param {}
 */
gulp.task('generate-dist', function(done) {
  log('*** Generating dist ***');
  plugins.sequence('clean-dist', 'minify-html', 'minify-js', done);
});









/**
 * This tasks inject the css.min into the index.html file
 * Dependency: null
 * @param {}
 */
gulp.task('inject-css-pro', ['minify-styles'], function () {

  var sources = gulp.src(config.paths.css.dest + '*min.css', {read: false});

  return gulp
    .src(config.paths.html.index)
    .pipe(plugins.inject(sources, {relative: true}))
    .pipe(gulp.dest(config.paths.html.mainDirectory));
});
